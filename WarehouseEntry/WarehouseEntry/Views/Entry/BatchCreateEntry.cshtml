@using Resources
@model WarehouseEntry.Models.ViewEntryModel<List<WarehouseEntry.Business.Models.EntryBaseModel>>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section DynamicHeader{

    <style type="text/css">
        #tableContainer table {
            -moz-min-width: 2400px;
            -ms-min-width: 2400px;
            -o-min-width: 2400px;
            -webkit-min-width: 2400px;
            min-width: 2400px;
        }

        .model-id-container {
            display: none;
        }

        .row-template {
            display: none;
        }

        .btn-batch-container {
            margin-bottom: 20px;
        }

            .btn-batch-container a.btn-action {
                float: left;
                width: 40px;
                height: 40px;
                font-size: 40px;
            }

            .btn-batch-container br {
                clear: both;
            }
    </style>

    <script src="~/Scripts/jquery.ajaxfileupload.js" type="text/javascript"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            var validateForTemPre = "item";
            var validateForModelPre = "model";
            var validateForDataPre = "model.DataModel";
            var colsName = [
                "ModelId", "ProjectName", "ProjectNum", "ProductName", "SuiteCount", "ProductImgNum",
                "Sequence", "ImgNum", "Height", "Width", "StomachWeight", "WingWeight",
                "Length", "PieceCount", "Weight", "AssemblageDate", "SolderingDate", "CorrectionDate", "InspectionDate"
            ];

            function getTemplateRow() {
                return $(".row-template");
            }

            function getEditingRows() {
                return $("#tableContainer table").find("tr").slice(2);
            }

            function paddingZero(value) {
                return value < 10 ? "0" + value : "" + value;
            }

            function buildData() {
                var rows = getEditingRows();

                var array = "[";
                for (var i = 0; i < rows.length; i++) {
                    var row = $(rows[i]);
                    var cells = row.children();
                    array += "{";
                    for (var j = 1; j < cells.length; j++) {
                        var cell = $(cells[j]);
                        var key = colsName[j - 1];
                        key = '"' + key + '"';
                        var value = cell.find("input").val().trim();
                        value = '"' + value + '"';
                        array += key + ':' + value;
                        if (j < cells.length - 1) {
                            array += ",";
                        }
                    }
                    array += "}";
                    if (i < rows.length - 1) {
                        array += ",";
                    }
                }
                array += "]";
                return $.parseJSON(array);
            }

            function getErrorMsg(data, key) {
                for (var i = 0; i < data.length; i++) {
                    if (key == data[i].key) {
                        return data[i].error;
                    }
                }
                return "";
            }

            function initializePartialView(editingRows) {
                if (editingRows == undefined) {
                    editingRows = getEditingRows();
                }
                if (editingRows != null) {
                    editingRows.find(".date").datetimepicker({
                        language: 'zh-CN',
                        weekStart: 0,
                        autoclose: true,
                        todayBtn: true,
                        todayHighlight: true,
                        startView: "month",
                        minView: "month",
                        forceParse: true,
                        pickerPosition: "top-left"
                    });
                }

                $("#cboxSeq").click(function () {
                    $(this).change();
                });

                $("#cboxSeq").change(function () {
                    var checked = $(this).is(":checked");
                    getEditingRows().find(":checkbox").each(function (i, e) {
                        e.checked = checked;
                    });
                });
            }

            initializePartialView();

            $("#lbtnAppend").click(function () {
                var rowTemplate = getTemplateRow();
                var newRow = rowTemplate.clone();
                newRow.removeClass("row-template");
                var cells = newRow.children();
                var now = new Date();
                var dateString = now.getFullYear() + "-" + paddingZero(now.getMonth() + 1) + "-" + paddingZero(now.getDate());
                var timeString = dateString + " " + paddingZero(now.getHours()) + ":" + paddingZero(now.getMinutes()) + ":" + paddingZero(now.getSeconds());
                for (var i = 0; i < cells.length; i++) {
                    var cell = $(cells[i]);
                    var input = cell.find("input");
                    if (cell.hasClass("datetime-cell")) {
                        input.val(timeString);
                    } else if (cell.hasClass("date-cell")) {
                        input.val(dateString);
                    } else if (cell.hasClass("int")) {
                        input.val("0");
                    } else if (cell.hasClass("float")) {
                        input.val("0.000");
                    }
                }
                rowTemplate.parent().append(newRow);
                newRow.find(".date").datetimepicker({
                    language: 'zh-CN',
                    weekStart: 0,
                    autoclose: true,
                    todayBtn: true,
                    todayHighlight: true,
                    startView: "month",
                    minView: "month",
                    forceParse: true,
                    pickerPosition: "top-left"
                });
            });

            $("#lbtnRemove").click(function () {
                var removeItems = getEditingRows().find(":checked");
                var hasRemove = removeItems.length > 0;
                if (hasRemove) {
                    removeItems.parent().parent().remove();
                }
            });

            $("#lbtnImport").click(function () {
                $("#fuExcel").click();
            });

            $("#fuExcel").AjaxFileUpload({
                action: '@Url.Action("BatchPartialEntryForEdit")',
                isJson: false,
                onComplete: function (fileName, response) {
                    var rows = getEditingRows();
                    $("#tableContainer").html(response);
                    var rowTemplate = getTemplateRow();
                    rowTemplate.after(rows);
                    initializePartialView();
                }
            });

            $("#btnBatchCreate").click(function () {
                var tableValidateSpans = getEditingRows().find(".field-validation-valid");
                var propertyValidateSpans = $("#otherPropertiesContainer .field-validation-valid");
                tableValidateSpans.removeClass("icon-asterisk");
                tableValidateSpans.text("");
                propertyValidateSpans.removeClass("icon-asterisk");
                propertyValidateSpans.text("");
                ajaxPost('@Url.Action("BatchCreateEntry")',
                    {
                        model: {
                            HandlerName: $("#handlerSelector").val(),
                            DataModel: buildData()
                        }
                    },
                    undefined,
                    function (data) {
                        showSeccess(data, '@Url.Action("Index", "Home")');
                    },
                    function (data) {
                        if (data.Msg != undefined && data.Msg != "") {
                            showFailed(data);
                        } else if (data.ObjectModel != undefined && data.ObjectModel.length > 0) {
                            var i, validateSpan, msgFor, error;
                            for (i = 0; i < propertyValidateSpans.length; i++) {
                                validateSpan = $(propertyValidateSpans[i]);
                                msgFor = validateSpan.attr("data-valmsg-for");
                                error = getErrorMsg(data.ObjectModel, validateForModelPre + "." + msgFor);
                                if (error != "") {
                                    validateSpan.addClass("icon-asterisk");
                                    validateSpan.text(error);
                                }
                            }
                            for (i = 0; i < tableValidateSpans.length; i++) {
                                var rowIndex = Math.floor(i / colsName.length);
                                var colIndex = i % colsName.length;
                                validateSpan = $(tableValidateSpans[i]);
                                msgFor = validateSpan.attr("data-valmsg-for");
                                var msgForPre = validateForTemPre + ".";
                                if (msgFor.substr(0, msgForPre.length) == msgForPre) {
                                    msgFor = msgFor.substr(msgForPre.length);
                                } else {
                                    msgForPre = validateForDataPre + ".";
                                    if (msgFor.substr(0, msgForPre.length) == msgForPre) {
                                        msgFor = msgFor.substr(msgForPre.length);
                                    }
                                }
                                if (msgFor == colsName[colIndex]) {
                                    error = getErrorMsg(data.ObjectModel, validateForDataPre + "[" + rowIndex + "]." + msgFor);
                                    if (error != "") {
                                        validateSpan.addClass("icon-asterisk");
                                        validateSpan.text(error);
                                    }
                                } else {
                                    // 程序不正确，无法设置错误消息
                                }
                            }
                        }
                    });
            });
        });

    </script>
}

@using (Html.BeginForm())
{ 
    @Html.AntiForgeryToken()
    <input id="fuExcel" name="fuExcel" type="file" style="display: none;" />
    <div class="container-fluid" style="min-height: 300px">
        <div class="form-horizontal">
            <div class="row">
                <div class="col-xs-12 col-md-12">
                    <div id="tableContainer" class="table-overflow-x-container">
                        @Html.Partial("BatchPartialEntryForEdit", Model.DataModel)
                    </div>
                    <div class="btn-batch-container">
                        <a id="lbtnAppend" class="btn-action icon-plus-sign" href="javascript:void(0);"></a>
                        <a id="lbtnRemove" class="btn-action icon-minus-sign" href="javascript:void(0);"></a>
                        <a id="lbtnDownload" class="btn-action icon-download" href='@Url.Content("~/Temp/TemplateFiles/Template.xlsx")'></a>
                        <a id="lbtnImport" class="btn-action icon-upload" href="javascript:void(0);"></a>
                        <br />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="otherPropertiesContainer" class="container" style="margin-top: 10px;">
        <div class="form-horizontal">
            <div class="row">
                <div class="col-xs-offset-3 col-md-offset-3 col-xs-6 col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.HandlerName, new { @class = "control-label col-md-2" })
                        <div class="col-xs-8 col-md-8">
                            @Html.DropDownListFor(m => m.HandlerName, Model.Handlers, new { id = "handlerSelector", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.HandlerName)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-md-12">
                    <div class="form-group">
                        <div class="col-xs-4 col-md-4">
                        </div>
                        <div class="col-xs-offset-3 col-md-offset-3 col-xs-2 col-md-2" style="display: none;">
                            <input id="btnSaveTemp" type="button" value="Save Temp" class="button button-pill button-primary" />
                        </div>
                        <div class="col-xs-4 col-md-4">
                            <input id="btnBatchCreate" type="button" value="@SiteCommonResource.TextCreate" class="button button-pill button-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}