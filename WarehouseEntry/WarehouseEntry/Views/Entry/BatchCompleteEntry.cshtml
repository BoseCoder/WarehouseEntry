@using Resources
@using WarehouseEntry.Business.Languages
@model WarehouseEntry.Models.ViewBaseModel<List<WarehouseEntry.Business.Models.EntryCompleteModel>>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section DynamicHeader{

    <style type="text/css">
        #tableContainer table {
            -moz-min-width: 2600px;
            -ms-min-width: 2600px;
            -o-min-width: 2600px;
            -webkit-min-width: 2600px;
            min-width: 2600px;
        }

        .model-id-container {
            display: none;
        }
    </style>

    <script type="text/javascript">

        $(document).ready(function () {
            var validateForTemPre = "item";
            var validateForDataPre = "model.DataModel";
            var colsName = [
                "ModelID", "ProjectName", "ProjectNum", "ProductName", "SuiteCount", "ProductImgNum",
                "Sequence", "ImgNum", "Height", "Width", "StomachWeight", "WingWeight",
                "Length", "PieceCount", "Weight", "AssemblageDate", "SolderingDate",
                "CorrectionDate", "InspectionDate", "CompletionDate", "DespatchDate"
            ];

            $("#tableContainer .date").datetimepicker({
                language: 'zh-CN',
                weekStart: 0,
                autoclose: true,
                todayBtn: true,
                todayHighlight: true,
                startView: "month",
                minView: "month",
                forceParse: true,
                pickerPosition: "top-left"
            });

            $("#completion-date-container .date").datetimepicker({
                language: 'zh-CN',
                weekStart: 0,
                autoclose: true,
                todayBtn: true,
                todayHighlight: true,
                startView: "month",
                minView: "month",
                forceParse: true,
                pickerPosition: "top-left"
            }).datetimepicker('update', new Date()).on('changeDate', function (ev) {
                $("#tableContainer .completion-date .date").datetimepicker('update', ev.date);
            });
            $("#despatch-date-container .date").datetimepicker({
                language: 'zh-CN',
                weekStart: 0,
                autoclose: true,
                todayBtn: true,
                todayHighlight: true,
                startView: "month",
                minView: "month",
                forceParse: true,
                pickerPosition: "top-left"
            }).datetimepicker('update', new Date()).on('changeDate', function (ev) {
                $("#tableContainer .despatch-date .date").datetimepicker('update', ev.date);
            });

            function getEditingRows() {
                return $("#tableContainer table").find("tr").slice(1);
            }

            function buildData() {
                var rows = getEditingRows();

                var array = "[";
                for (var i = 0; i < rows.length; i++) {
                    var row = $(rows[i]);
                    var cells = row.children();
                    array += "{";
                    for (var j = 0; j < cells.length; j++) {
                        var cell = $(cells[j]);
                        var key = colsName[j];
                        key = '"' + key + '"';
                        var value = cell.find("input").val().trim();
                        value = '"' + value + '"';
                        array += key + ':' + value;
                        if (j < cells.length - 1) {
                            array += ",";
                        }
                    }
                    array += "}";
                    if (i < rows.length - 1) {
                        array += ",";
                    }
                }
                array += "]";
                return $.parseJSON(array);
            }

            function getErrorMsg(data, key) {
                for (var i = 0; i < data.length; i++) {
                    if (key == data[i].key) {
                        return data[i].error;
                    }
                }
                return "";
            }

            $("#btnReject").click(function () {
                ajaxPost('@Url.Action("BatchCompleteEntry", new { id = ViewContext.RouteData.Values["id"], flowType = "Reject" })',
                    null,
                    undefined,
                    function (data) {
                        showSeccess(data, '@Url.Action("Index", "Home")');
                    },
                    function (data) {
                        showFailed(data);
                    });
            });

            $("#btnComplete").click(function () {
                var tableValidateSpans = getEditingRows().find(".field-validation-valid");
                ajaxPost('@Url.Action("BatchCompleteEntry", new { id = ViewContext.RouteData.Values["id"], flowType = "Complete" })',
                    {
                        model: {
                            id: '@ViewContext.RouteData.Values["id"]',
                            DataModel: buildData()
                        }
                    },
                    undefined,
                    function (data) {
                        showSeccess(data, '@Url.Action("Index", "Home")');
                    },
                    function (data) {
                        if (data.Msg != undefined && data.Msg != "") {
                            showFailed(data);
                        } else if (data.ObjectModel != undefined && data.ObjectModel.length > 0) {
                            var i, validateSpan, msgFor, error;
                            for (i = 0; i < tableValidateSpans.length; i++) {
                                var rowIndex = Math.floor(i / colsName.length);
                                var colIndex = i % colsName.length;
                                validateSpan = $(tableValidateSpans[i]);
                                msgFor = validateSpan.attr("data-valmsg-for");
                                var msgForPre = validateForTemPre + ".";
                                if (msgFor.substr(0, msgForPre.length) == msgForPre) {
                                    msgFor = msgFor.substr(msgForPre.length);
                                } else {
                                    msgForPre = validateForDataPre + ".";
                                    if (msgFor.substr(0, msgForPre.length) == msgForPre) {
                                        msgFor = msgFor.substr(msgForPre.length);
                                    }
                                }
                                if (msgFor == colsName[colIndex]) {
                                    error = getErrorMsg(data.ObjectModel, validateForDataPre + "[" + rowIndex + "]." + msgFor);
                                    if (error != "") {
                                        validateSpan.addClass("icon-asterisk");
                                        validateSpan.text(error);
                                    }
                                } else {
                                    // 程序不正确，无法设置错误消息
                                }
                            }
                        }
                    });
            });
        });

    </script>
}


@using (Html.BeginForm())
{ 
    @Html.AntiForgeryToken()

    <div class="container-fluid">
        <div class="form-horizontal">
            <div class="row">
                <div class="col-xs-12 col-md-12">
                    <div id="tableContainer" class="table-overflow-x-container">
                        @Html.Partial("BatchPartialEntryForComplete", Model.DataModel)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container" style="margin-top: 10px;">
        <div class="form-horizontal">
            <div class="row">
                <div class="col-xs-6 col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4" for="txtCompletionDate">@EntryModelResource.CompletionDate</label>
                        <div id="completion-date-container" class="col-md-8">
                            <div class="input-group date" data-date="" data-date-format="yyyy-mm-dd" data-link-format="yyyy-mm-dd">
                                <input class="form-control" id="txtCompletionDate" type="datetime" value="">
                                <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-6 col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4" for="txtDespatchDate">@EntryModelResource.DespatchDate</label>
                        <div id="despatch-date-container" class="col-md-8">
                            <div class="input-group date" data-date="" data-date-format="yyyy-mm-dd" data-link-format="yyyy-mm-dd">
                                <input class="form-control" id="txtDespatchDate" type="datetime" value="">
                                <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-md-12">
                    <div class="form-group">
                        <div class="col-xs-offset-4 col-md-offset-4 col-xs-2 col-md-2">
                            <input id="btnReject" type="button" value="@SiteCommonResource.TextReject" class="button button-pill button-primary" />
                        </div>
                        <div class="col-xs-6 col-md-6">
                            <input id="btnComplete" type="button" value="@SiteCommonResource.TextComplete" class="button button-pill button-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}